name: Generate GitHub page
on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '0 5 * * *' 
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  check-and-publish:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
              pages/main/package-lock.json
              pages/file/package-lock.json
      - run: npm ci
        working-directory: pages/main
      - run: npm ci
        working-directory: pages/file

      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'
      - run: go install github.com/reviewdog/errorformat/cmd/errorformat@latest

      - name: explcheck (testfiles)
        run: |
          docker run --rm -v "$PWD:/workspace" -w /workspace ghcr.io/witiko/expltools/explcheck --porcelain --error-format='%f:%l:%c:%e:%k: %t%n %m' expltools/explcheck/testfiles/*.tex >> errors.txt || true

      - name: Get Docker Image Digest
        id: image_digest
        run: |
          DIGEST=$(docker manifest inspect registry.gitlab.com/islandoftex/images/texlive:latest | grep -m1 'digest' | awk -F '"' '{print $4}')
          echo "digest=$DIGEST" >> $GITHUB_ENV

      - name: Cache TeX Files
        id: cache-tex
        uses: actions/cache@v4
        with:
          path: /tmp/texlive
          key: texlive-${{ env.digest }}

      - name: Extract TeX files from TeX Live
        if: steps.cache-tex.outputs.cache-hit != 'true'
        run: |
          # Create and start the container
          CONTAINER_ID=$(docker create registry.gitlab.com/islandoftex/images/texlive:latest)

          # Find all .tex files
          FILES=$(docker run --rm registry.gitlab.com/islandoftex/images/texlive:latest find /usr/local/texlive -type f \( -name "*.tex" -o -name "*.sty" -o -name "*.cls" -o -name "*.opt" \))

          # Copy each file while preserving structure
          for FILE in $FILES; do
            TARGET_PATH="/tmp/texlive${FILE%/*}"  # Extract directory structure
            mkdir -p "$TARGET_PATH"        # Ensure the target directory exists
            docker cp "$CONTAINER_ID:$FILE" "$TARGET_PATH/"
          done

          # Clean up
          docker rm -f $CONTAINER_ID

      - name: Get expltools submodule commit SHA
        run: echo "EXPLTOOLS_SHA=$(git rev-parse HEAD:expltools)" >> $GITHUB_ENV
      - name: Get workflow file commit SHA
        run: echo "WORKFLOW_SHA=$(git rev-parse HEAD:.github/workflows/generate-page.yml)" >> $GITHUB_ENV

      - name: Cache Errors
        id: cache-errors
        uses: actions/cache@v4
        with:
          path: /tmp/errors
          # We retrigger at a change of the workflow as this is an indication that the parameters for expltools chanbged
          key: errors-${{ env.digest }}-${{ env.EXPLTOOLS_SHA }}-${{ env.WORKFLOW_SHA }}

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: moreutils
          version: 1.0

      - name: explcheck (TeX Live) | fresh
        if: steps.cache-errors.outputs.cache-hit != 'true'
        run: |
          set -e

          # Ignore errors
          #  - line too long (s103)
          #  - white space (s204)

          timeout 50m bash -c '
            find /tmp/texlive -type f -print -exec \
              docker run --rm -v "/tmp/texlive:/tmp/texlive" ghcr.io/witiko/expltools/explcheck \
                --porcelain \
                --ignored-issues=w100,s103,s204,s206 \
                --error-format="%f:%l:%c:%e:%k: %t%n %m" \
                {} + | sponge -a errors.txt
          ' || echo "Process terminated after 50 minutes."

          errorformat -w jsonl '%f:%l:%c:%e:%k: %t%n %m' < errors.txt > errors.list

          jq -s . < errors.list > errors.json

          mkdir /tmp/errors
          cp errors.* /tmp/errors/

      - name: explcheck (TeX Live) | cache
        if: steps.cache-errors.outputs.cache-hit == 'true'
        run: cp /tmp/errors/errors.* .

      - name: debug
        run: |
          head errors.*
          tail errors.*

      - name: Create index.html for all error files
        run: scripts/create-dirs-for-files.py
        
      - name: Fill node_modules
        run: |
          mkdir -p publish/node_modules
          # inspired by https://stackoverflow.com/a/52408677/873282
          rsync -ah --include='*/' --include='*min*' --include='*/dist/***' --include='*/min/***' --exclude='*' pages/main/node_modules/ publish/node_modules/
          rsync -ah --include='*/' --include='*min*' --include='*/dist/***' --include='*/min/***' --exclude='*' pages/file/node_modules/ publish/node_modules/

      - name: Make latex.json available
        run: cp 3rd-party/madoko/styles/lang/latex.json publish/
      
      - name: Create index.html files for each folder
        run: |
          mv pages/main/index.html publish/
          cd publish
          ../scripts/create-index-html.sh

      - name: Create errors-summarized.json
        run: |
          # create errors-summarized.json
          mv errors.json publish/
          cd publish
          ../scripts/create-errors-summarized.py
          rm errors.json

      - name: Create 404.html
        run: cp pages/404.html publish/

      - name: debug
        run: |
          head -n 20 publish/errors-summarized.json

          echo "..."

          tail -n 20 publish/errors-summarized.json

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./publish
          force_orphan: true
